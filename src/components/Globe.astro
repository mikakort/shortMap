<div id="globe-container" class="w-full h-[400px] relative">
  <canvas id="globe-canvas" class="w-full h-full"></canvas>
</div>

<script>
  import * as THREE from 'three';

  function initGlobe() {
    const container = document.getElementById('globe-container');
    const canvas = document.getElementById('globe-canvas') as HTMLCanvasElement;

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, container!.clientWidth / container!.clientHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ canvas, alpha: true, antialias: true });

    renderer.setSize(container!.clientWidth, container!.clientHeight);
    renderer.setPixelRatio(window.devicePixelRatio);

    // Create sphere geometry
    const geometry = new THREE.SphereGeometry(2, 64, 64);
    const material = new THREE.MeshPhongMaterial({
      color: 0x000000,
      wireframe: true,
      transparent: true,
      opacity: 0.8,
    });

    const globe = new THREE.Mesh(geometry, material);
    scene.add(globe);

    // Add ambient light
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambientLight);

    // Add directional light
    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight.position.set(5, 3, 5);
    scene.add(directionalLight);

    camera.position.z = 5;

    // Animation
    function animate() {
      requestAnimationFrame(animate);
      globe.rotation.y += 0.005;
      renderer.render(scene, camera);
    }

    // Handle resize
    window.addEventListener('resize', () => {
      camera.aspect = container!.clientWidth / container!.clientHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(container!.clientWidth, container!.clientHeight);
    });

    animate();
  }

  // Initialize when the DOM is loaded
  document.addEventListener('DOMContentLoaded', initGlobe);
</script>

<style>
  #globe-container {
    background: transparent;
  }
</style>
