---
import Layout from '../layouts/Layout.astro';
import Globe from '../components/Globe.astro';

// Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
// Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.
---

<head>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
</head>

<Layout title="ShortMap - Optimize Your Route">
  <main class="min-h-screen bg-gradient-to-b from-background to-muted">
    <div class="container mx-auto px-4 py-16">
      <div class="text-center mb-12">
        <h1 class="text-4xl font-bold tracking-tight text-primary mb-4">ShortMap</h1>
        <p class="text-xl text-muted-foreground max-w-2xl mx-auto">
          Optimize your journey by finding the shortest route between multiple destinations
        </p>
      </div>

      <div class="max-w-3xl mx-auto">
        <div class="mb-8">
          <Globe />
        </div>

        <div class="bg-card rounded-lg shadow-lg p-6">
          <div class="space-y-6">
            <div class="space-y-4">
              <div class="space-y-2">
                <label for="start-location" class="text-sm font-medium text-foreground"> Starting Location </label>
                <div class="relative">
                  <input
                    type="text"
                    id="start-location"
                    class="w-full p-3 rounded-md border border-input bg-background text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring"
                    placeholder="Enter your starting point"
                  />
                  <button
                    type="button"
                    class="absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground"
                    onclick="clearAutocompleteField('start-location')">
                    <!-- X icon SVG here -->
                  </button>
                </div>
              </div>

              <div id="destinations" class="space-y-2">
                <label class="text-sm font-medium text-foreground"> Destinations </label>
                <div class="space-y-2">
                  <div class="relative">
                    <input
                      type="text"
                      class="w-full p-3 rounded-md border border-input bg-background text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring"
                      placeholder="Enter destination"
                    />
                    <button
                      type="button"
                      class="absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground"
                      onclick="clearAutocompleteField('destination-0')">
                      <!-- X icon SVG here -->
                    </button>
                  </div>
                </div>
              </div>

              <button
                id="add-destination"
                class="w-full p-2 text-sm text-muted-foreground hover:text-foreground transition-colors flex items-center justify-center gap-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round">
                  <path d="M5 12h14"></path>
                  <path d="M12 5v14"></path>
                </svg>
                Add another destination
              </button>
            </div>

            <button
              id="calculate-route"
              class="w-full bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2 rounded-md text-sm font-medium transition-colors">
              Calculate Route
            </button>
          </div>

          <div class="mt-8 space-y-4">
            <h2 class="text-lg font-semibold text-foreground">Features</h2>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div class="p-4 rounded-lg bg-muted">
                <h3 class="font-medium mb-2">Optimized Routes</h3>
                <p class="text-sm text-muted-foreground">Get the most efficient path between multiple destinations</p>
              </div>
              <div class="p-4 rounded-lg bg-muted">
                <h3 class="font-medium mb-2">Real-time Updates</h3>
                <p class="text-sm text-muted-foreground">Live traffic data for accurate journey times</p>
              </div>
              <div class="p-4 rounded-lg bg-muted">
                <h3 class="font-medium mb-2">Easy to Use</h3>
                <p class="text-sm text-muted-foreground">Simple interface for quick route planning</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { initializeGoogleMaps, attachNativeAutocomplete } from '../scripts/googleMaps';
  import { calculateRoute } from '../scripts/api';

  const GOOGLE_MAPS_API_KEY = import.meta.env.PUBLIC_GOOGLE_MAPS_API_KEY;

  // Global variables
  let destinationCount = 1;
  const selectedAddresses: { [key: string]: string } = {};

  // Initialize the application
  async function init() {
    if (!GOOGLE_MAPS_API_KEY) {
      alert('Google Maps API key is not configured. Please check your environment variables.');
      return;
    }

    try {
      await initializeGoogleMaps(GOOGLE_MAPS_API_KEY);

      // Initialize start location
      const startLocationInput = document.getElementById('start-location') as HTMLInputElement;
      if (startLocationInput) {
        attachNativeAutocomplete(startLocationInput, (place: any) => {
          if (place?.formatted_address) {
            selectedAddresses['start-location'] = place.formatted_address;
            startLocationInput.value = place.formatted_address;
            console.log('Start location selected:', place.formatted_address);
          }
        });
        // Add clear button functionality
        const clearBtn = document.getElementById('clear-start-location');
        if (clearBtn) {
          clearBtn.addEventListener('click', () => {
            startLocationInput.value = '';
            delete selectedAddresses['start-location'];
          });
        }
      }

      // Initialize initial destination
      const destinationsContainer = document.getElementById('destinations') as HTMLDivElement;
      const initialDestinationInput = destinationsContainer.querySelector('input') as HTMLInputElement;
      if (initialDestinationInput) {
        const initialId = `destination-0`;
        initialDestinationInput.id = initialId;
        attachNativeAutocomplete(initialDestinationInput, (place: any) => {
          if (place?.formatted_address) {
            selectedAddresses[initialId] = place.formatted_address;
            initialDestinationInput.value = place.formatted_address;
            console.log('Destination selected:', place.formatted_address);
          }
        });
        // Add clear button functionality
        const clearBtn = document.getElementById('clear-destination-0');
        if (clearBtn) {
          clearBtn.addEventListener('click', () => {
            initialDestinationInput.value = '';
            delete selectedAddresses[initialId];
          });
        }
      }

      // Set up event listeners
      setupEventListeners();
    } catch (error) {
      console.error('Failed to initialize Google Maps:', error);
    }
  }

  // Set up all event listeners
  function setupEventListeners() {
    const addDestinationBtn = document.getElementById('add-destination') as HTMLButtonElement;
    const calculateButton = document.getElementById('calculate-route') as HTMLButtonElement;

    addDestinationBtn?.addEventListener('click', addDestination);
    calculateButton?.addEventListener('click', handleCalculateRoute);
  }

  // Add a new destination input
  function addDestination() {
    const destinationsContainer = document.getElementById('destinations') as HTMLDivElement;
    const destinationList = destinationsContainer.querySelector('.space-y-2');
    if (!destinationList) return;

    const destinationId = `destination-${destinationCount++}`;
    const newInput = createDestinationInput(destinationId);
    destinationList.appendChild(newInput.wrapper);
    attachNativeAutocomplete(newInput.input, (place: any) => {
      if (place?.formatted_address) {
        selectedAddresses[destinationId] = place.formatted_address;
        newInput.input.value = place.formatted_address;
        console.log('New destination selected:', place.formatted_address);
      }
    });
    // Add clear button functionality
    const clearBtn = newInput.wrapper.querySelector('.remove-destination-btn');
    if (clearBtn) {
      clearBtn.addEventListener('click', () => {
        newInput.input.value = '';
        delete selectedAddresses[destinationId];
        newInput.wrapper.remove();
      });
    }
  }

  // Create a new destination input element
  function createDestinationInput(id: string): { wrapper: HTMLDivElement; input: HTMLInputElement } {
    const wrapper = document.createElement('div');
    wrapper.className = 'relative mt-2';
    wrapper.innerHTML = `
      <input
        type="text"
        id="${id}"
        class="w-full p-3 pr-10 rounded-md border border-input bg-background text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring"
        placeholder="Enter destination"
      />
      <button type="button" class="absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground remove-destination-btn" aria-label="Remove destination"><i class='fa-solid fa-circle-xmark'></i></button>
    `;
    const input = wrapper.querySelector('input') as HTMLInputElement;
    // Attach event listener to the X button
    const removeBtn = wrapper.querySelector('.remove-destination-btn');
    if (removeBtn) {
      removeBtn.addEventListener('click', () => {
        input.value = '';
        delete selectedAddresses[id];
        wrapper.remove();
      });
    }
    return { wrapper, input };
  }

  // Handle calculate route button click
  async function handleCalculateRoute() {
    const calculateButton = document.getElementById('calculate-route') as HTMLButtonElement;

    try {
      const addresses = collectAddresses();
      console.log('Collected addresses:', addresses);

      if (addresses.length < 2) {
        throw new Error('Please enter at least a starting location and one destination');
      }

      calculateButton.textContent = 'Calculating...';
      calculateButton.disabled = true;

      const result = await calculateRoute(addresses);
      console.log('API Response:', result);
    } catch (error) {
      if (error instanceof Error) {
        alert(error.message);
      } else {
        alert('An unexpected error occurred');
      }
    } finally {
      calculateButton.textContent = 'Calculate Route';
      calculateButton.disabled = false;
    }
  }

  // Collect all addresses from the selectedAddresses object
  function collectAddresses(): string[] {
    const addresses: string[] = [];

    // Get start location
    if (selectedAddresses['start-location']) {
      addresses.push(selectedAddresses['start-location']);
    }

    // Get all destinations in order
    const destinationKeys = Object.keys(selectedAddresses)
      .filter((key) => key.startsWith('destination-'))
      .sort((a, b) => {
        const numA = parseInt(a.split('-')[1], 10);
        const numB = parseInt(b.split('-')[1], 10);
        return numA - numB;
      });

    destinationKeys.forEach((key) => {
      addresses.push(selectedAddresses[key]);
    });

    console.log('Selected addresses object:', selectedAddresses);
    console.log('Final collected addresses array:', addresses);
    return addresses;
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', init);

  function clearAutocompleteField(id: string) {
    const el = document.getElementById(id) as any;
    if (el && el.tagName === 'GMP-PLACE-AUTOCOMPLETE') {
      // Try to clear the underlying input
      const input = el.inputElement || el.querySelector('input');
      if (input) input.value = '';
      // Optionally, clear from your selectedAddresses object
      if (selectedAddresses[id]) delete selectedAddresses[id];
    }
  }
</script>

<style>
  input {
    transition: all 0.2s ease-in-out;
  }
</style>
